<?xml version="1.0" encoding="UTF-8"?>

<configuration>
    <!--    日志的默认配置 会生成 spring.log 文件 -->
<!--        <include resource="org/springframework/boot/logging/logback/base.xml"/>-->
    <jmxConfigurator/>

    <!--<appender name="LOGSTASH" class="com.cwbase.logback.RedisAppender">-->
    <!--<host>localhost</host>-->
    <!--<port>32774</port>-->
    <!--<key>my-spring-boot-auth</key>-->

    <!--</appender>-->
    <!-- 读取spring.application.name中的属性来生成日志文件名 -->
    <springProperty scope="context" name="logAppName" source="spring.application.name" defaultValue="localhost.log"/>
    <!-- 勿用${LOG_FILE}相对路径 生成目录 -->
    <!-- ${LOG_PATH} 读取的就是 application.yml 中的 logging.file.path 的值 -->
    <property name="LOG_HOME" value="${LOG_PATH}"/>

    <property name="log.pattern"
              value="[%X{TRACE_ID}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n"/>

    <!--  默认的按天回滚的日志  -->
    <appender name="FILE_DEFAULT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${logAppName}/log.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <!--错误日志统一输出到这里-->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${logAppName}/error/error.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <MaxHistory>30</MaxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>ERROR</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 控制台输出，彩色日志格式
    参考 <include resource="org/springframework/boot/logging/logback/defaults.xml" />
     -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>

        <!--临界值过滤器,过滤掉低于指定临界值的日志-->
        <!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
        <!--            &lt;!&ndash;过滤掉所有低于info级别的日志&ndash;&gt;-->
        <!--            <level>info</level>-->
        <!--        </filter>-->
    </appender>


    <!-- 这里的优先级高于 <root level="INFO">   -->
    <!-- 配置不同环境日志级别 -->
    <springProfile name="dev">
        <logger name="com.aaa.mybatisplus" level="DEBUG"/>
    </springProfile>
    <springProfile name="prod">
        <logger name="com.aaa.mybatisplus" level="INFO"/>
    </springProfile>

    <!-- 配置异步日志，每一个配置的 appender 需要单独的去配置异步文件-->
    <!-- 异步输出 -->
    <appender name="FILE_DEFAULT_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE_DEFAULT"/>
    </appender>
    <appender name="FILE_ERROR_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE_ERROR"/>
    </appender>

    <!-- 设置日志级别 -->
    <root level="INFO">
        <appender-ref ref="FILE_DEFAULT_ASYNC"/>
        <appender-ref ref="FILE_ERROR_ASYNC"/>
        <!--  控制台日志输出，一般禁用即可      -->
        <appender-ref ref="STDOUT"/>
    </root>

</configuration>
